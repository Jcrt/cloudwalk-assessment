// Package cw_logAnalyzer group all required artifacts to analyze the logs generated by log parser
// and aggregate all relevant information from game log structs
package cw_logAnalyzer

import (
	cw_logParser "cloudwalk-assessment/cw-logParser"
	"cloudwalk-assessment/quake3"
	"fmt"
	"strconv"

	funk "github.com/thoas/go-funk"
)

// Defines the <world> code in the Kill logs
const worldKillerId int = 1022

// GameInfo struct defines all information relative to the Game in analysis aspect
type GameInfo struct {
	TotalKills int
	Players []string
	Kills map[string]int
}

// MODGameInfo struct defines a map of all deaths occurred during the game and group it providing a counter of each Mean of Death
type MODGameInfo struct {
	KillsByMeans map[string]int
}

// Func GetGamesInfo build a map containing all matches and it's relevant information
// The parameter games receives an array of game log parser object
//
// Returns a map containing all matches
func GetGamesInfo(games []cw_logParser.Game) map[string]GameInfo {
	gamesInfo := make(map[string]GameInfo, 0)
	for index, game := range games {
		
		game := GameInfo {
			Players: getPlayerNames(game.Players),
			TotalKills: getTotalKills(game.Kills),
			Kills: getKillsByPlayer(game),
		}
		index := getGameNumber(index)
		fmt.Println(index)
		gamesInfo[index] = game
	}

	return gamesInfo;
}

// Func GetMODGamesInfo build a map for each mean of death that occurred in logs, group it and count it
// The parameter games receives an array of game log parser object
//
// Returns a map containing all means of death grouped and counted
func GetMODGamesInfo(games []cw_logParser.Game) map[string]MODGameInfo {
	modGamesInfo := make(map[string]MODGameInfo)
	for index, game := range games {
		modGame := MODGameInfo {
			KillsByMeans: getKillsByMean(game.Kills),
		}
		modGamesInfo[getGameNumber(index)] = modGame
	}	
	return modGamesInfo
}

func getGameNumber(gameNumber int) string {
	return "game_"+ strconv.Itoa(gameNumber + 1)
}

// Func getKillsByMean generates a map containing all means of death that occurred during a match
// The parameter kills receive an array of Kill and group it into a map with a counter
//
// Returns a map containing as key the name of mean of death and as value the amount of time that it occurs
func getKillsByMean(kills []cw_logParser.Kill) map[string]int {
	killsByMeant := make(map[string]int)

	for _, kill := range kills {
		meanOfDeathName := quake3.MeanOfDeath(kill.MeanOfDeath).String()
		
		if entry, ok := killsByMeant[meanOfDeathName]; ok {
			entry++
			killsByMeant[meanOfDeathName] = entry
		} else {
			killsByMeant[meanOfDeathName] = 1
		}
	}

	return killsByMeant;
}

// Func getPlayerNames generates a string array containing all player names that have entered during a match
// The parameter gamePlayers receive a map of Player gathered from logs
//
// Returns a string array containing all player names at the end of the match
func getPlayerNames(gamePlayers map[int]cw_logParser.Player) []string {
		players := funk.Values(gamePlayers).([]cw_logParser.Player)
		playerNames := funk.Get(players, "Name").([]string)
		return playerNames;
}

// Func getTotalKills counts all kills occurred in a match
// The parameter gameKills receives a list of Kill and count it
//
// Returns an int with the total amount of kills occurred in the match
func getTotalKills(gameKills []cw_logParser.Kill) int{
	return len(gameKills)
}

// Func getKillsByPlayer groups all kills by player and count it
// If a player was killed by the <world>, it's scored is decreased by 1 every time that it happened
// The parameter game is the Game struct
//
// Returns a map where the key is the mean of kill and the value is an int as a counter of occurrences
func getKillsByPlayer(game cw_logParser.Game) map[string]int {
	killsByPlayer := make(map[string]int, 0)

	for _, player := range game.Players {
		killsByPlayer[player.Name] = 0
	}

	for _, kill := range game.Kills {
		playerName := game.Players[kill.KillerId].Name

		if value, ok := killsByPlayer[playerName]; ok{
			value++;
			killsByPlayer[playerName] = value
		} else if kill.KillerId == worldKillerId {
			killedPlayer := game.Players[kill.KilledId].Name
			killScore := killsByPlayer[killedPlayer]
			killScore--
			killsByPlayer[killedPlayer] = killScore
		}
	}

	return killsByPlayer
}
